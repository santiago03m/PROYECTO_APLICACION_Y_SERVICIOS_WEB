@page "/Variable"

<h3 class="text-center mt-4">Gestión de Variable</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Variable
    </button>
    }
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (variables is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando variables...</p>
    </div>
}
else if (!variables.Any())
{
    <div class="alert alert-info text-center">No hay variables disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Nombre</th>
                <th>Fecha Creación</th>
                <th>FK Email Usuario</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (v, index) in variables.Select((v, i) => (v, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@v.Nombre</td>
                    <td>@v.FechaCreacion.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@v.FkEmailUsuario</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarVariable(v)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }
                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarVariable(v.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(variable.Id.ToString()) ? "Agregar Variable" : "Editar Variable")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="variable" OnValidSubmit="GuardarVariable">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputNumber class="form-control" @bind-Value="variable.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="variable.Nombre" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de Creación:</label>
                            <InputDate class="form-control" @bind-Value="variable.FechaCreacion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">FK Email Usuario:</label>
                            <InputSelect class="form-select" @bind-Value="variable.FkEmailUsuario" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var u in usuariosDisponibles)
                                {
                                    <option value="@u.Email">@u.Email</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Variable> variables = new();
    private Variable variable = new();
    private List<Usuario> usuariosDisponibles = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();


    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Variable";
        variables = await Repository.GetAsync<List<Variable>>(url);
        usuariosDisponibles = await Repository.GetAsync<List<Usuario>>("api/Usuarios");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        variable = new Variable();
        mostrarFormulario = true;
    }

    private void EditarVariable(Variable v)
    {
        variable = new Variable
        {
            Id = v.Id,
            Nombre = v.Nombre,
            FechaCreacion = v.FechaCreacion,
            FkEmailUsuario = v.FkEmailUsuario
        };
        mostrarFormulario = true;
    }

    private async Task GuardarVariable()
    {
        var url1 = "api/Variable";
        var url2 = $"api/Variable/{variable.Id}";

        if (variable.Id == 0)
            return;

        var existe = variables.Any(v => v.Id == variable.Id);

        if (!existe)
            await Repository.PostAsync(url1, variable);
        else
            await Repository.PutAsync(url2, variable);

        variables = await Repository.GetAsync<List<Variable>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Variable guardada correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarVariable(int id)
    {
        var url1 = "api/Variable";
        var url2 = $"api/Variable/{id}";

        await Repository.DeleteAsync(url2);
        variables = await Repository.GetAsync<List<Variable>>(url1);
        mensajeAlerta = "Variable eliminada correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
