@page "/Actor"

<h3 class="text-center mt-4">Gestión de Actor</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Actor
    </button>
    }
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (actores is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando actores...</p>
    </div>
}
else if (!actores.Any())
{
    <div class="alert alert-info text-center">No hay actores disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>ID Tipo Actor</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in actores)
            {
                <tr>
                    <td>@a.Id</td>
                    <td>@a.Nombre</td>
                    <td>@a.FkIdTipoActor</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarActor(a)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }

                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarActor(a.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="input-group ms-3" style="max-width: 300px;">
    <input type="text" class="form-control" placeholder="Buscar por ID" @bind="idBusqueda" />
    <button class="btn btn-outline-primary" type="button" @onclick="BuscarPorId" title="Buscar Actor">
        <i class="fas fa-search"></i> Buscar
    </button>
</div>

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">Detalle del Actor</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalBusqueda"></button>
                </div>
                <div class="modal-body">
                    @if (actorBuscado != null)
                    {
                        <dl class="row">
                            <dt class="col-sm-4">ID</dt>
                            <dd class="col-sm-8">@actorBuscado.Id</dd>
                            <dt class="col-sm-4">Nombre</dt>
                            <dd class="col-sm-8">@actorBuscado.Nombre</dd>
                            <dt class="col-sm-4">Tipo Actor</dt>
                            <dd class="col-sm-8">@tipoActoresDisponibles.FirstOrDefault(t => t.Id == actorBuscado.FkIdTipoActor)?.Nombre</dd>
                        </dl>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se encontró un actor con ese ID.</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(actor.Id) ? "Agregar Actor" : "Editar Actor")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="actor" OnValidSubmit="GuardarActor">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="actor.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="actor.Nombre" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Tipo Actor:</label>
                            <InputSelect class="form-select" @bind-Value="actor.FkIdTipoActor" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var t in tipoActoresDisponibles)
                                {
                                    <option value="@t.Id">@t.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Actor> actores = new();
    private List<TipoActor> tipoActoresDisponibles = new();
    private Actor actor = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();
    private string idBusqueda = string.Empty;
    private bool mostrarModalBusqueda = false;
    private Actor? actorBuscado;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Actor";
        actores = await Repository.GetAsync<List<Actor>>(url);
        tipoActoresDisponibles = await Repository.GetAsync<List<TipoActor>>("api/TipoActor");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }
    }

    private void MostrarFormulario()
    {
        actor = new Actor();
        mostrarFormulario = true;
    }

    private void EditarActor(Actor a)
    {
        actor = new Actor
        {
            Id = a.Id,
            Nombre = a.Nombre,
            FkIdTipoActor = a.FkIdTipoActor
        };
        mostrarFormulario = true;
    }

    private async Task GuardarActor()
    {
        var url1 = "api/Actor";
        var url2 = $"api/Actor/{actor.Id}";

        if (string.IsNullOrEmpty(actor.Id))
            return;

        var existe = actores.Any(a => a.Id == actor.Id);

        if (!existe)
            await Repository.PostAsync(url1, actor);
        else
            await Repository.PutAsync(url2, actor);

        actores = await Repository.GetAsync<List<Actor>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Actor guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarActor(string id)
    {
        var url1 = "api/Actor";
        var url2 = $"api/Actor/{id}";

        await Repository.DeleteAsync(url2);
        actores = await Repository.GetAsync<List<Actor>>(url1);
        mensajeAlerta = "Actor eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task BuscarPorId()
    {
        mostrarModalBusqueda = false;
        actorBuscado = null;
        if (string.IsNullOrWhiteSpace(idBusqueda))
        {
            mensajeAlerta = "Ingrese un ID válido";
            mostrarAlerta = true;
            return;
        }
        actorBuscado = await Repository.GetByIDAsync<Actor>("api/Actor", idBusqueda);
        mostrarModalBusqueda = true;
    }
    private void CerrarModalBusqueda()
    {
        mostrarModalBusqueda = false;
        actorBuscado = null;
    }
}
