@page "/Literal"

<h3 class="text-center mt-4">Gestión de Literal</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary d-flex align-items-center" @onclick="MostrarFormulario">
        <i class="fas fa-plus me-1"></i> Agregar Literal
    </button>
    }
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (litulares is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando literales...</p>
    </div>
}
else if (!litulares.Any())
{
    <div class="alert alert-info text-center">No hay literales disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Descripción</th>
                <th>ID Artículo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (l, index) in litulares.Select((l, i) => (l, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@l.Descripcion</td>
                    <td>@l.FkIdArticulo</td>
                    <td>
                        <div class="d-flex justify-content-center flex-wrap">
                            @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                            {
                            <button class="btn btn-primary btn-sm me-2 mb-1 d-flex align-items-center" @onclick="() => EditarLiteral(l)">
                                <i class="fas fa-edit me-1"></i> Editar
                            </button>
                            }
                            @if (userRoles.Contains("admin"))
                            {
                            <button class="btn btn-danger btn-sm mb-1 d-flex align-items-center" @onclick="() => EliminarLiteral(l.Id)">
                                <i class="fas fa-trash-alt me-1"></i> Eliminar
                            </button>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(literal.Id) ? "Agregar Literal" : "Editar Literal")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="literal" OnValidSubmit="GuardarLiteral">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="literal.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="literal.Descripcion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Artículo:</label>
                            <InputSelect class="form-select" @bind-Value="literal.FkIdArticulo" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var a in articulosDisponibles)
                                {
                                    <option value="@a.Id">@a.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="card mt-3 border-0 bg-light">
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="fas fa-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Literal> litulares = new();
    private List<Articulo> articulosDisponibles = new();
    private Literal literal = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Literal";
        litulares = await Repository.GetAsync<List<Literal>>(url);
        articulosDisponibles = await Repository.GetAsync<List<Articulo>>("api/Articulo");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        literal = new Literal();
        mostrarFormulario = true;
    }

    private void EditarLiteral(Literal l)
    {
        literal = new Literal
        {
            Id = l.Id,
            Descripcion = l.Descripcion,
            FkIdArticulo = l.FkIdArticulo
        };
        mostrarFormulario = true;
    }

    private async Task GuardarLiteral()
    {
        var url1 = "api/Literal";
        var url2 = $"api/Literal/{literal.Id}";

        if (string.IsNullOrEmpty(literal.Id))
            return;

        var existe = litulares.Any(l => l.Id == literal.Id);

        if (!existe)
            await Repository.PostAsync(url1, literal);
        else
            await Repository.PutAsync(url2, literal);

        litulares = await Repository.GetAsync<List<Literal>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Literal guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarLiteral(string id)
    {
        var url1 = "api/Literal";
        var url2 = $"api/Literal/{id}";

        await Repository.DeleteAsync(url2);
        litulares = await Repository.GetAsync<List<Literal>>(url1);
        mensajeAlerta = "Literal eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
