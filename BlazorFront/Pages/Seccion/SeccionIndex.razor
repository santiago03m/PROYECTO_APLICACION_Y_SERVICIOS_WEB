@using Blazored.LocalStorage

@page "/Seccion"

<h3 class="text-center mt-4">Gestión de Secciones</h3>
@if (rolPrincipal == "admin")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i> Agregar Sección
        </button>
    </div>
}

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (secciones is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando secciones...</p>
    </div>
}
else if (!secciones.Any())
{
    <div class="alert alert-info text-center">No hay secciones disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (s, index) in secciones.Select((s, i) => (s, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@s.Nombre</td>
                    <td>
                        @if (rolPrincipal == "admin" || rolPrincipal == "Validador")
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarSeccion(a)">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        }
                        @if (rolPrincipal == "admin")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarSeccion(a.Id)">
                                <i class="fas fa-trash"></i> Eliminar
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(seccion.Id) ? "Agregar Sección" : "Editar Sección")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="seccion" OnValidSubmit="GuardarSeccion">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="seccion.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="seccion.Nombre" required />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@inject ILocalStorageService localStorage

@code {
    private List<Seccion> secciones = new();
    private Seccion seccion = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string rolPrincipal = string.Empty;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Seccion";
        secciones = await Repository.GetAsync<List<Seccion>>(url);
        rolPrincipal = await localStorage.GetItemAsStringAsync("rolPrincipal");
    }

    private void MostrarFormulario()
    {
        seccion = new Seccion();
        mostrarFormulario = true;
    }

    private void EditarSeccion(Seccion s)
    {
        seccion = new Seccion
        {
            Id = s.Id,
            Nombre = s.Nombre
        };
        mostrarFormulario = true;
    }

    private async Task GuardarSeccion()
    {
        var url1 = "api/Seccion";
        var url2 = $"api/Seccion/{seccion.Id}";

        if (string.IsNullOrEmpty(seccion.Id))
        {
            var response = await Repository.PostAsync<Seccion>(url1, seccion);
        }
        else
        {
            var response = await Repository.PutAsync<Seccion>(url2, seccion);
        }
        secciones = await Repository.GetAsync<List<Seccion>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Sección guardada correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarSeccion(string id)
    {
        var url1 = "api/Seccion";
        var url2 = $"api/Seccion/{id}";

        await Repository.DeleteAsync(url2);
        secciones = await Repository.GetAsync<List<Seccion>>(url1);
        mensajeAlerta = "Sección eliminada correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
