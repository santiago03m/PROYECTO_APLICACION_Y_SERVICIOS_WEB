@page "/Indicador"
@using System.Text.Json

<h3 class="text-center mt-4">Gestión de Indicadores</h3>
<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary d-flex align-items-center" @onclick="MostrarFormulario">
        <i class="fas fa-plus me-1"></i> Agregar Indicador
    </button>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (indicadores is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando indicadores...</p>
    </div>
}
else if (!indicadores.Any())
{
    <div class="alert alert-info text-center">No hay indicadores disponibles.</div>
}
else
{
    <div style="overflow-x: auto;">
        <table class="table table-hover table-striped shadow-sm rounded-3">
            <thead class="table-dark text-center">
                <tr>
                    <th>#</th>
                    <th>ID</th>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Objetivo</th>
                    <th>Alcance</th>
                    <th>Fórmula</th>
                    <th>Tipo Indicador</th>
                    <th>Unidad Medición</th>
                    <th>Meta</th>
                    <th>Sentido</th>
                    <th>Frecuencia</th>
                    <th>Artículo</th>
                    <th>Literal</th>
                    <th>Numeral</th>
                    <th>Parágrafo</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (i, index) in indicadores.Select((i, idx) => (i, idx + 1)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@i.Id</td>
                        <td>@i.Codigo</td>
                        <td>@i.Nombre</td>
                        <td>@i.Objetivo</td>
                        <td>@i.Alcance</td>
                        <td>@i.Formula</td>
                        <td>@i.FkIdTipoIndicador</td>
                        <td>@i.FkIdUnidadMedicion</td>
                        <td>@i.Meta</td>
                        <td>@i.FkIdSentido</td>
                        <td>@i.FkIdFrecuencia</td>
                        <td>@i.FkIdArticulo</td>
                        <td>@i.FkIdLiteral</td>
                        <td>@i.FkIdNumeral</td>
                        <td>@i.FkIdParagrafo</td>
                        <td class="text-center">
                            <div class="d-flex justify-content-center flex-wrap">
                                <button class="btn btn-primary btn-sm me-2 mb-1 d-flex align-items-center" @onclick="() => EditarIndicador(i)">
                                    <i class="fas fa-edit me-1"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm mb-1 d-flex align-items-center" @onclick="() => EliminarIndicador(i.Id)">
                                    <i class="fas fa-trash-alt me-1"></i> Eliminar
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">@((indicador.Id == 0) ? "Agregar Indicador" : "Editar Indicador")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="indicador" OnValidSubmit="GuardarIndicador">
                        <div class="row">
                            <div class="col-lg-6 col-12">
                                <div class="mb-3">
                                    <label class="form-label">Código:</label>
                                    <InputText class="form-control" @bind-Value="indicador.Codigo" required />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Nombre:</label>
                                    <InputText class="form-control" @bind-Value="indicador.Nombre" required />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Objetivo:</label>
                                    <InputTextArea class="form-control" @bind-Value="indicador.Objetivo" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Alcance:</label>
                                    <InputTextArea class="form-control" @bind-Value="indicador.Alcance" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Fórmula:</label>
                                    <InputTextArea class="form-control" @bind-Value="indicador.Formula" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Tipo Indicador (ID):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdTipoIndicador" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var t in tiposIndicadoresDisponibles)
                                        {
                                            <option value="@t.Id">@t.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Unidad Medición (ID):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdUnidadMedicion" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var u in unidadesMedicionDisponibles)
                                        {
                                            <option value="@u.Id">@u.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Meta:</label>
                                    <InputText class="form-control" @bind-Value="indicador.Meta" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Sentido (ID):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdSentido" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var s in sentidosDisponibles)
                                        {
                                            <option value="@s.Id">@s.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Frecuencia (ID):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdFrecuencia" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var f in frecuenciasDisponibles)
                                        {
                                            <option value="@f.Id">@f.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Artículo (FK):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdArticulo" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var a in articulosDisponibles)
                                        {
                                            <option value="@a.Id">@a.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Literal (FK):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdLiteral" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var l in literalesDisponibles)
                                        {
                                            <option value="@l.Id">@l.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Numeral (FK):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdNumeral" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var n in numeralesDisponibles)
                                        {
                                            <option value="@n.Id">@n.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Parágrafo (FK):</label>
                                    <InputSelect class="form-select" @bind-Value="indicador.FkIdParagrafo" required>
                                        <option disabled value="">-- Seleccione --</option>
                                        @foreach (var p in paragrafosDisponibles)
                                        {
                                            <option value="@p.Id">@p.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-lg-6 col-12">
                                <div class="mb-3">
                                    <label class="form-label">Responsables:</label>
                                    <div class="d-flex flex-wrap">
                                        @foreach (var actor in responsablesSeleccionados)
                                        {
                                            <div class="badge bg-primary text-white rounded-pill d-flex align-items-center me-2 mb-2 px-3 py-2">
                                                <span class="me-2">@actor.Nombre</span>
                                                <button type="button" class="btn-close btn-sm ms-2 d-flex align-items-center"
                                                    @onclick="() => QuitarResponsable(actor)">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="input-group">
                                    <InputSelect class="form-select" @bind-Value="responsableSeleccionadoId">
                                        <option disabled value="">-- Seleccione Responsable --</option>
                                        @foreach (var actor in actoresDisponibles)
                                        {
                                            <option value="@actor.Id">@actor.Nombre</option>
                                        }
                                    </InputSelect>

                                    <button class="btn btn-primary" type="button" @onclick="AgregarResponsable"
                                        disabled="@string.IsNullOrWhiteSpace(responsableSeleccionadoId)">
                                        Añadir Responsable
                                    </button>

                                </div>
                                <div class="mb-3 mt-3">
                                    <label class="form-label">Fuentes:</label>
                                    <div class="d-flex flex-wrap">
                                        @foreach (var fuente in fuentesSeleccionadas)
                                        {
                                            <div class="badge bg-primary text-white rounded-pill d-flex align-items-center me-2 mb-2 px-3 py-2">
                                                <span class="me-2">@fuente.Nombre</span>
                                                <button type="button" class="btn-close btn-sm ms-2 d-flex align-items-center"
                                                    @onclick="() => QuitarFuente(fuente)">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="input-group">
                                    <InputSelect class="form-select" @bind-Value="fuenteSeleccionadaId">
                                        <option value="">-- Seleccione Fuente --</option>
                                        @foreach (var fuente in fuentesDisponibles)
                                        {
                                            <option value="@fuente.Id">@fuente.Nombre</option>
                                        }
                                    </InputSelect>
                                    <button class="btn btn-primary" type="button" @onclick="AgregarFuente" disabled="@(!fuenteSeleccionadaId.HasValue)">
                                        Añadir Fuente
                                    </button>
                                </div>
                                <div class="mb-3 mt-3">
                                    <label class="form-label">Representaciones Visuales:</label>
                                    <div class="d-flex flex-wrap">
                                        @foreach (var representacion in representacionesVisualesSeleccionadas)
                                        {
                                            <div class="badge bg-primary text-white rounded-pill d-flex align-items-center me-2 mb-2 px-3 py-2">
                                                <span class="me-2">@representacion.Nombre</span>
                                                <button type="button" class="btn-close btn-sm ms-2 d-flex align-items-center"
                                                    @onclick="() => QuitarRepresentacionVisual(representacion)">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="input-group">
                                    <InputSelect class="form-select" @bind-Value="representacionVisualSeleccionadaId">
                                        <option value="">-- Seleccione Representación Visual --</option>
                                        @foreach (var representacion in representacionesVisualesDisponibles)
                                        {
                                            <option value="@representacion.Id">@representacion.Nombre</option>
                                        }
                                    </InputSelect>
                                    <button class="btn btn-primary" type="button" @onclick="AgregarRepresentacionVisual" disabled="@(!representacionVisualSeleccionadaId.HasValue)">
                                        Añadir Representación Visual
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="card mt-3 border-0 bg-light">
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="fas fa-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<Indicador> indicadores = new();
    private List<TipoIndicador> tiposIndicadoresDisponibles = new();
    private List<UnidadMedicion> unidadesMedicionDisponibles = new();
    private List<Sentido> sentidosDisponibles = new();
    private List<Frecuencia> frecuenciasDisponibles = new();
    private List<Articulo> articulosDisponibles = new();
    private List<Literal> literalesDisponibles = new();
    private List<Numeral> numeralesDisponibles = new();
    private List<Paragrafo> paragrafosDisponibles = new();
    private Indicador indicador = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    //Tablas intermedias
    //ResponsablesPorIndicador
    private List<Actor> Actores = new();
    private List<Actor> actoresDisponibles = new();
    private List<Actor> responsablesSeleccionados = new();
    private string? responsableSeleccionadoId = "";
    //FuentesPorIndicador
    private List<Fuente> Fuentes = new();
    private List<Fuente> fuentesDisponibles = new();
    private List<Fuente> fuentesSeleccionadas = new();
    private int? fuenteSeleccionadaId = null;
    //RepresenVisualPorIndicador
    private List<RepresentacionVisual> RepresentacionVisual = new();
    private List<RepresentacionVisual> representacionesVisualesDisponibles = new();
    private List<RepresentacionVisual> representacionesVisualesSeleccionadas = new();
    private int? representacionVisualSeleccionadaId = null;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Indicador";
        indicadores = await Repository.GetAsync<List<Indicador>>(url);
        tiposIndicadoresDisponibles = await Repository.GetAsync<List<TipoIndicador>>("api/TipoIndicadores");
        unidadesMedicionDisponibles = await Repository.GetAsync<List<UnidadMedicion>>("api/UnidadMedicion");
        sentidosDisponibles = await Repository.GetAsync<List<Sentido>>("api/Sentido");
        frecuenciasDisponibles = await Repository.GetAsync<List<Frecuencia>>("api/Frecuencia");
        articulosDisponibles = await Repository.GetAsync<List<Articulo>>("api/Articulo");
        literalesDisponibles = await Repository.GetAsync<List<Literal>>("api/Literal");
        numeralesDisponibles = await Repository.GetAsync<List<Numeral>>("api/Numeral");
        paragrafosDisponibles = await Repository.GetAsync<List<Paragrafo>>("api/Paragrafo");
        Actores = await Repository.GetAsync<List<Actor>>("api/Actor");
        Fuentes = await Repository.GetAsync<List<Fuente>>("api/Fuente");
        RepresentacionVisual = await Repository.GetAsync<List<RepresentacionVisual>>("api/RepresentacionVisual");
    }

    private void MostrarFormulario()
    {
        indicador = new Indicador();
        mostrarFormulario = true;
        actoresDisponibles = Actores;
        fuentesDisponibles = Fuentes;
        representacionesVisualesDisponibles = RepresentacionVisual;
    }

    private async Task EditarIndicador(Indicador i)
    {
        indicador = new Indicador
        {
            Id = i.Id,
            Codigo = i.Codigo,
            Nombre = i.Nombre,
            Meta = i.Meta,
            Objetivo = i.Objetivo,
            Alcance = i.Alcance,
            Formula = i.Formula,
            FkIdTipoIndicador = i.FkIdTipoIndicador,
            FkIdUnidadMedicion = i.FkIdUnidadMedicion,
            FkIdSentido = i.FkIdSentido,
            FkIdFrecuencia = i.FkIdFrecuencia,
            FkIdArticulo = i.FkIdArticulo,
            FkIdLiteral = i.FkIdLiteral,
            FkIdNumeral = i.FkIdNumeral,
            FkIdParagrafo = i.FkIdParagrafo
        };

        mostrarFormulario = true;
        mensajeAlerta = string.Empty;
        mostrarAlerta = false;

        // Cargar actores disponibles
        actoresDisponibles = await Repository.GetAsync<List<Actor>>("api/Actor");
        // Cargar responsables ya asignados
        await CargarResponsables();
        // Eliminar los ya seleccionados de la lista de disponibles
        actoresDisponibles = actoresDisponibles.Where(a => !responsablesSeleccionados.Any(r => r.Id == a.Id)).ToList();

        // Cargar fuentes disponibles
        fuentesDisponibles = await Repository.GetAsync<List<Fuente>>("api/Fuente");
        // Cargar fuentes ya asignadas
        await CargarFuentes();
        // Eliminar los ya seleccionados de la lista de disponibles
        fuentesDisponibles = fuentesDisponibles.Where(f => !fuentesSeleccionadas.Any(r => r.Id == f.Id)).ToList();

        // Cargar representaciones visuales disponibles
        representacionesVisualesDisponibles = await Repository.GetAsync<List<RepresentacionVisual>>("api/RepresentacionVisual");
        // Cargar representaciones visuales ya asignadas
        await CargarRepresentacionesVisuales();
        // Eliminar los ya seleccionados de la lista de disponibles
        representacionesVisualesDisponibles = representacionesVisualesDisponibles.Where(r => !representacionesVisualesSeleccionadas.Any(rv => rv.Id == r.Id)).ToList();
    }

    private async Task GuardarIndicador()
    {
        mostrarFormulario = false;
        var urlIndicador = "api/Indicador";
        var url2 = $"api/Indicador/{indicador.Id}";

        if (indicador.Id == 0)
        {
            // Guardar nuevo indicador
            var indicadorGuardado = await Repository.PostAsync(urlIndicador, indicador);
            indicador.Id = indicadorGuardado.Id;


            mensajeAlerta = "Indicador guardado correctamente";

            // Verificar si hay responsables antes de intentar guardarlos
            if (responsablesSeleccionados != null && responsablesSeleccionados.Any())
            {
                foreach (var responsable in responsablesSeleccionados)
                {
                    var nuevoResponsable = new ResponsablesPorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdResponsable = responsable.Id,
                        FechaAsignacion = DateTime.Now
                    };

                    await Repository.PostAsync("api/ResponsablesPorIndicador", nuevoResponsable);
                }
            }
            // Verificar si hay fuentes antes de intentar guardarlas
            if (fuentesSeleccionadas != null && fuentesSeleccionadas.Any())
            {
                foreach (var fuente in fuentesSeleccionadas)
                {
                    var nuevaFuente = new FuentePorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdFuente = fuente.Id,
                    };

                    await Repository.PostAsync("api/FuentePorIndicador", nuevaFuente);
                }
            }
            // Verificar si hay representaciones visuales antes de intentar guardarlas
            if (representacionesVisualesSeleccionadas != null && representacionesVisualesSeleccionadas.Any())
            {
                foreach (var representacion in representacionesVisualesSeleccionadas)
                {
                    var nuevaRepresentacion = new RepresenVisualPorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdRepresenVisual = representacion.Id,
                    };

                    await Repository.PostAsync("api/RepresenVisualPorIndicador", nuevaRepresentacion);
                }
            }
        }
        else
        {
            // Actualizar indicador
            await Repository.PutAsync(url2, indicador);
            mensajeAlerta = "Indicador actualizado correctamente";

            // Obtener todos los responsables actuales
            var responsablesActuales = await Repository.GetAsync<List<ResponsablesPorIndicador>>("api/ResponsablesPorIndicador");

            // Filtrar los responsables del indicador actual
            var responsablesDelIndicador = responsablesActuales
            .Where(r => r.FkIdIndicador == indicador.Id)
            .ToList();

            // Crear listas de IDs para la comparación
            var responsablesActualesIds = responsablesDelIndicador.Select(r => r.FkIdResponsable).ToList();
            var responsablesSeleccionadosIds = responsablesSeleccionados.Select(r => r.Id).ToList();

            // Eliminar los responsables que ya no están seleccionados
            foreach (var responsable in responsablesDelIndicador)
            {
                if (!responsablesSeleccionadosIds.Contains(responsable.FkIdResponsable))
                {
                    await Repository.DeleteAsync($"api/ResponsablesPorIndicador/{responsable.FkIdResponsable}/{indicador.Id}");
                }
            }

            // Agregar los nuevos responsables seleccionados
            foreach (var responsableId in responsablesSeleccionadosIds)
            {
                if (!responsablesActualesIds.Contains(responsableId))
                {
                    var nuevoResponsable = new ResponsablesPorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdResponsable = responsableId,
                        FechaAsignacion = DateTime.Now
                    };

                    await Repository.PostAsync("api/ResponsablesPorIndicador", nuevoResponsable);
                }
            }
            //Obtenemos todas las fuentes actuales
            var fuentesActuales = await Repository.GetAsync<List<FuentePorIndicador>>("api/FuentePorIndicador");
            //filtrar las fuentes del indicador actual
            var fuentesDelIndicador = fuentesActuales.Where(f => f.FkIdIndicador == indicador.Id).ToList();
            // Crear listas de IDs para la comparación
            var fuentesActualesIds = fuentesDelIndicador.Select(f => f.FkIdFuente).ToList();
            var fuentesSeleccionadasIds = fuentesSeleccionadas.Select(f => f.Id).ToList();
            // Eliminar las fuentes que ya no están seleccionadas
            foreach (var fuente in fuentesDelIndicador)
            {
                if (!fuentesSeleccionadasIds.Contains(fuente.FkIdFuente))
                {
                    await Repository.DeleteAsync($"api/FuentePorIndicador/{fuente.FkIdFuente}/{indicador.Id}");
                }
            }
            // Agregar las nuevas fuentes seleccionadas
            foreach (var fuenteId in fuentesSeleccionadasIds)
            {
                if (!fuentesActualesIds.Contains(fuenteId))
                {
                    var nuevaFuente = new FuentePorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdFuente = fuenteId,
                    };

                    await Repository.PostAsync("api/FuentePorIndicador", nuevaFuente);
                }
            }

            //Obtenemos todas las representaciones actuales
            var representacionesActuales = await Repository.GetAsync<List<RepresenVisualPorIndicador>>("api/RepresenVisualPorIndicador");
            //filtrar las representaciones del indicador actual
            var representacionesDelIndicador = representacionesActuales.Where(r => r.FkIdIndicador == indicador.Id).ToList();
            // Crear listas de IDs para la comparación
            var representacionesActualesIds = representacionesDelIndicador.Select(r => r.FkIdRepresenVisual).ToList();
            var representacionesSeleccionadasIds = representacionesVisualesSeleccionadas.Select(r => r.Id).ToList();
            // Eliminar las representaciones que ya no están seleccionadas
            foreach (var representacion in representacionesDelIndicador)
            {
                if (!representacionesSeleccionadasIds.Contains(representacion.FkIdRepresenVisual))
                {
                    await Repository.DeleteAsync($"api/RepresenVisualPorIndicador/{indicador.Id}/{representacion.FkIdRepresenVisual}");
                }
            }
            // Agregar las nuevas representaciones seleccionadas
            foreach (var representacionId in representacionesSeleccionadasIds)
            {
                if (!representacionesActualesIds.Contains(representacionId))
                {
                    var nuevaRepresentacion = new RepresenVisualPorIndicador
                    {
                        FkIdIndicador = indicador.Id,
                        FkIdRepresenVisual = representacionId,
                    };

                    await Repository.PostAsync("api/RepresenVisualPorIndicador", nuevaRepresentacion);
                }
            }
        }

        indicadores = await Repository.GetAsync<List<Indicador>>(urlIndicador);
        mostrarAlerta = true;
    }

    private async Task EliminarIndicador(int id)
    {
        var url1 = "api/Indicador";
        var url2 = $"api/Indicador/{id}";

        await Repository.DeleteAsync(url2);
        indicadores = await Repository.GetAsync<List<Indicador>>(url1);
        mensajeAlerta = "Indicador eliminado correctamente";
        mostrarAlerta = true;
    }

    private void AgregarResponsable()
    {
        if (!string.IsNullOrWhiteSpace(responsableSeleccionadoId))
        {
            var actor = actoresDisponibles.FirstOrDefault(a => a.Id == responsableSeleccionadoId);
            if (actor != null && !responsablesSeleccionados.Any(r => r.Id == actor.Id))
            {
                responsablesSeleccionados.Add(actor);
                actoresDisponibles.Remove(actor);
                responsableSeleccionadoId = string.Empty;
            }
        }
    }
    private async Task CargarResponsables()
    {
        if (indicador.Id > 0)
        {
            // Obtener todos los responsables asociados a cualquier indicador
            var responsablesActuales = await Repository.GetAsync<List<ResponsablesPorIndicador>>("api/ResponsablesPorIndicador");

            // Filtrar solo los responsables para el indicador actual
            var responsablesDelIndicador = responsablesActuales
            .Where(r => r.FkIdIndicador == indicador.Id)
            .ToList();

            // Limpiar la lista actual de responsables seleccionados
            responsablesSeleccionados.Clear();

            // Mapear los responsables actuales a una lista que será mostrada como seleccionados
            foreach (var r in responsablesDelIndicador)
            {
                var responsable = await Repository.GetByIDAsync<Actor>("api/Actor", r.FkIdResponsable);
                responsablesSeleccionados.Add(responsable);
            }
        }
    }
    private void QuitarResponsable(Actor actor)
    {
        responsablesSeleccionados.Remove(actor);
        actoresDisponibles.Add(actor);
        responsableSeleccionadoId = string.Empty;
    }
    private void AgregarFuente()
    {
        if (fuenteSeleccionadaId.HasValue)
        {
            var fuente = fuentesDisponibles.FirstOrDefault(f => f.Id == fuenteSeleccionadaId);
            if (fuente != null && !fuentesSeleccionadas.Any(f => f.Id == fuente.Id))
            {
                fuentesSeleccionadas.Add(fuente);
                fuentesDisponibles.Remove(fuente);
                fuenteSeleccionadaId = null;
            }
        }
    }
    private void QuitarFuente(Fuente fuente)
    {
        fuentesSeleccionadas.Remove(fuente);
        fuentesDisponibles.Add(fuente);
        fuenteSeleccionadaId = null;
    }
    private async Task CargarFuentes()
    {
        if (indicador.Id > 0)
        {
            // Obtener todos los responsables asociados a cualquier indicador
            var fuentesActuales = await Repository.GetAsync<List<FuentePorIndicador>>("api/FuentePorIndicador");

            // Filtrar solo los responsables para el indicador actual
            var fuentesDelIndicador = fuentesActuales
            .Where(r => r.FkIdIndicador == indicador.Id)
            .ToList();

            // Limpiar la lista actual de fuentes seleccionadas
            fuentesSeleccionadas.Clear();

            // Mapear los responsables actuales a una lista que será mostrada como seleccionados
            foreach (var r in fuentesDelIndicador)
            {
                var fuente = await Repository.GetByIDAsync<Fuente>("api/Fuente", r.FkIdFuente);
                fuentesSeleccionadas.Add(fuente);
            }
        }
    }
    private void AgregarRepresentacionVisual()
    {
        if (representacionVisualSeleccionadaId.HasValue)
        {
            var representacion = representacionesVisualesDisponibles.FirstOrDefault(r => r.Id == representacionVisualSeleccionadaId);
            if (representacion != null && !representacionesVisualesSeleccionadas.Any(r => r.Id == representacion.Id))
            {
                representacionesVisualesSeleccionadas.Add(representacion);
                representacionesVisualesDisponibles.Remove(representacion);
                representacionVisualSeleccionadaId = null;
            }
        }
    }
    private void QuitarRepresentacionVisual(RepresentacionVisual representacion)
    {
        representacionesVisualesSeleccionadas.Remove(representacion);
        representacionesVisualesDisponibles.Add(representacion);
        representacionVisualSeleccionadaId = null;
    }
    private async Task CargarRepresentacionesVisuales()
    {
        if (indicador.Id > 0)
        {
            // Obtener todos los responsables asociados a cualquier indicador
            var representacionesActuales = await Repository.GetAsync<List<RepresenVisualPorIndicador>>("api/RepresenVisualPorIndicador");

            // Filtrar solo los responsables para el indicador actual
            var representacionesDelIndicador = representacionesActuales
            .Where(r => r.FkIdIndicador == indicador.Id)
            .ToList();

            // Limpiar la lista actual de fuentes seleccionadas
            representacionesVisualesSeleccionadas.Clear();

            // Mapear los responsables actuales a una lista que será mostrada como seleccionados
            foreach (var r in representacionesDelIndicador)
            {
                var representacion = await Repository.GetByIDAsync<RepresentacionVisual>("api/RepresentacionVisual", r.FkIdRepresenVisual);
                representacionesVisualesSeleccionadas.Add(representacion);
            }
        }
    }
    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
