@page "/FuentePorIndicador"

<h3 class="text-center mt-4">Gestión de Fuente por Indicador</h3>
<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Relación
    </button>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (fuentesPorIndicador is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando datos...</p>
    </div>
}
else if (!fuentesPorIndicador.Any())
{
    <div class="alert alert-info text-center">No hay relaciones disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>ID Fuente</th>
                <th>ID Indicador</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (rel, index) in fuentesPorIndicador.Select((r, i) => (r, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@rel.FkIdFuente</td>
                    <td>@rel.FkIdIndicador</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarRelacion(rel)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarRelacion(rel.FkIdFuente, rel.FkIdIndicador)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esNuevo ? "Agregar Relación" : "Editar Relación")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="relacion" OnValidSubmit="GuardarRelacion">
                        <div class="mb-3">
                            <label class="form-label">ID Fuente:</label>
                            <InputNumber class="form-control" @bind-Value="relacion.FkIdFuente" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Indicador:</label>
                            <InputNumber class="form-control" @bind-Value="relacion.FkIdIndicador" required />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<FuentePorIndicador> fuentesPorIndicador = new();
    private FuentePorIndicador relacion = new();
    private bool mostrarFormulario = false;
    private bool esNuevo = true;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/FuentePorIndicador";
        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>(url);
    }

    private void MostrarFormulario()
    {
        relacion = new FuentePorIndicador();
        esNuevo = true;
        mostrarFormulario = true;
    }

    private void EditarRelacion(FuentePorIndicador rel)
    {
        relacion = new FuentePorIndicador
        {
            FkIdFuente = rel.FkIdFuente,
            FkIdIndicador = rel.FkIdIndicador
        };
        esNuevo = false;
        mostrarFormulario = true;
    }

    private async Task GuardarRelacion()
    {
        var url = "api/FuentePorIndicador";
        var compositeKey = $"{relacion.FkIdFuente},{relacion.FkIdIndicador}";
        var urlPut = $"api/FuentePorIndicador/{compositeKey}";

        if (esNuevo)
            await Repository.PostAsync(url, relacion);
        else
            await Repository.PutAsync(urlPut, relacion);

        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>(url);
        mostrarFormulario = false;
        mensajeAlerta = "Relación guardada correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarRelacion(int fuenteId, int indicadorId)
    {
        var url = $"api/FuentePorIndicador/{fuenteId},{indicadorId}";
        await Repository.DeleteAsync(url);

        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>("api/FuentePorIndicador");
        mensajeAlerta = "Relación eliminada correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}