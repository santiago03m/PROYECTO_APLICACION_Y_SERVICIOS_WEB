@page "/FuentePorIndicador"

<h3 class="text-center mt-4">Gestión de Fuente por Indicador</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
        <button class="btn btn-primary" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i> Agregar Relación
        </button>
    }
    <div class="input-group ms-3" style="max-width: 300px;">
        <input type="number" class="form-control" placeholder="Buscar por ID Fuente" @bind="idBusquedaFuente" min="1" />
        <button class="btn btn-outline-primary ms-2" type="button" @onclick="BuscarPorId" title="Buscar Relación">
            <i class="fas fa-search"></i> Buscar
        </button>
    </div>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (fuentesPorIndicador is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando datos...</p>
    </div>
}
else if (!fuentesPorIndicador.Any())
{
    <div class="alert alert-info text-center">No hay relaciones disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID Fuente</th>
                <th>ID Indicador</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rel in fuentesPorIndicador)
            {
                <tr>
                    <td>@rel.FkIdFuente</td>
                    <td>@rel.FkIdIndicador</td>
                    <td>
                        @if (userRoles.Contains("admin") || userRoles.Contains("Validador"))
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarRelacion(rel)">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        }

                        @if (userRoles.Contains("admin"))
                        {
                            <button class="btn btn-danger btn-sm"
                                @onclick="() => EliminarRelacion(rel.FkIdFuente, rel.FkIdIndicador)">
                                <i class="fas fa-trash"></i> Eliminar
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(esNuevo ? "Agregar Relación" : "Editar Relación")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="relacion" OnValidSubmit="GuardarRelacion">
                        <div class="mb-3">
                            <label class="form-label">ID Fuente:</label>
                            <InputSelect class="form-control" @bind-Value="relacion.FkIdFuente" required>
                                <option value="">Seleccione una fuente</option>
                                @foreach (var fuente in fuentesDisponibles)
                                {
                                    <option value="@fuente.Id">@fuente.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Indicador:</label>
                            <InputSelect class="form-control" @bind-Value="relacion.FkIdIndicador" required>
                                <option value="">Seleccione un indicador</option>
                                @foreach (var indicador in indicadoresDisponibles)
                                {
                                    <option value="@indicador.Id">@indicador.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">Relaciones de la Fuente</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalBusqueda"></button>
                </div>
                <div class="modal-body">
                    @if (relacionesBuscadas != null && relacionesBuscadas.Any())
                    {
                        <div class="mb-3">
                            <strong>ID Fuente:</strong> @idBusquedaFuente<br />
                            <strong>Nombre Fuente:</strong> @fuentesDisponibles.FirstOrDefault(f => f.Id == idBusquedaFuente)?.Nombre
                        </div>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>ID Indicador</th>
                                    <th>Nombre Indicador</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rel in relacionesBuscadas)
                                {
                                    <tr>
                                        <td>@rel.FkIdIndicador</td>
                                        <td>@indicadoresDisponibles.FirstOrDefault(i => i.Id == rel.FkIdIndicador)?.Nombre</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se encontraron relaciones para esa fuente.</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<FuentePorIndicador> fuentesPorIndicador = new();
    private List<Indicador> indicadoresDisponibles = new();
    private List<Fuente> fuentesDisponibles = new();
    private FuentePorIndicador relacion = new();
    private bool mostrarFormulario = false;
    private bool esNuevo = true;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List<string> userRoles = new();
    private int idBusquedaFuente;
    private bool mostrarModalBusqueda = false;
    private List<FuentePorIndicador> relacionesBuscadas = new();

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        var url = "api/FuentePorIndicador";
        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>(url);
        fuentesDisponibles = await Repository.GetAsync<List<Fuente>>("api/Fuente");
        indicadoresDisponibles = await Repository.GetAsync<List<Indicador>>("api/Indicador");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        relacion = new FuentePorIndicador();
        esNuevo = true;
        mostrarFormulario = true;
    }

    private void EditarRelacion(FuentePorIndicador rel)
    {
        relacion = new FuentePorIndicador
        {
            FkIdFuente = rel.FkIdFuente,
            FkIdIndicador = rel.FkIdIndicador
        };
        esNuevo = false;
        mostrarFormulario = true;
    }

    private async Task GuardarRelacion()
    {
        mostrarFormulario = false;
        var url1 = "api/FuentePorIndicador";

        if (esNuevo)
        {
            var existe = fuentesPorIndicador.Any(f =>
            f.FkIdFuente == relacion.FkIdFuente &&
            f.FkIdIndicador == relacion.FkIdIndicador);
            if (!existe)
            {
                await Repository.PostAsync(url1, relacion);
                fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>(url1);
                mensajeAlerta = "Relación guardada correctamente";
            }
            else
            {
                mensajeAlerta = "La relación ya existe";
            }
        }
        else
        {
            mensajeAlerta = "Esta tabla no adimite modificaciones";
        }
        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>(url1);
        mostrarAlerta = true;
    }

    private async Task EliminarRelacion(int fuenteId, int indicadorId)
    {
        var url = $"api/FuentePorIndicador/{fuenteId}/{indicadorId}";
        await Repository.DeleteAsync(url);

        fuentesPorIndicador = await Repository.GetAsync<List<FuentePorIndicador>>("api/FuentePorIndicador");
        mensajeAlerta = "Relación eliminada correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task BuscarPorId()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
        if (idBusquedaFuente <= 0)
        {
            mensajeAlerta = "Ingrese un ID de fuente válido (mayor a 0)";
            mostrarAlerta = true;
            return;
        }
        relacionesBuscadas = fuentesPorIndicador.Where(r => r.FkIdFuente == idBusquedaFuente).ToList();
        mostrarModalBusqueda = true;
    }
    private void CerrarModalBusqueda()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
    }
}