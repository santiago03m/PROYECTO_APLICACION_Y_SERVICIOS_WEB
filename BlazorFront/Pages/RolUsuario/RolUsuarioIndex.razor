@using Blazored.LocalStorage

@page "/RolUsuario"

<h3 class="text-center mt-4">Gesti√≥n de Rol de Usuario</h3>
@if (rolPrincipal == "admin")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i> Agregar Rol de Usuario
        </button>
    </div>
}

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (rolesUsuarios is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando roles de usuario...</p>
    </div>
}
else if (!rolesUsuarios.Any())
{
    <div class="alert alert-info text-center">No hay roles de usuario disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Email</th>
                <th>ID Rol</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (ru, index) in rolesUsuarios.Select((ru, i) => (ru, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@ru.FkEmail</td>
                    <td>@ru.FkIdRol</td>
                    <td>
                        @if (rolPrincipal == "admin" || rolPrincipal == "Validador")
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarRolUsuario(a)">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        }
                        @if (rolPrincipal == "admin")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarRolUsuario(a.Id)">
                                <i class="fas fa-trash"></i> Eliminar
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(rolUsuario.FkEmail) ? "Agregar Rol de Usuario" : "Editar Rol de Usuario")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="rolUsuario" OnValidSubmit="GuardarRolUsuario">
                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText class="form-control" @bind-Value="rolUsuario.FkEmail" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Rol:</label>
                            <InputNumber class="form-control" @bind-Value="rolUsuario.FkIdRol" required />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@inject ILocalStorageService localStorage

@code {
    private List<RolUsuario> rolesUsuarios = new();
    private RolUsuario rolUsuario = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string rolPrincipal = string.Empty;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/RolUsuario";
        rolesUsuarios = await Repository.GetAsync<List<RolUsuario>>(url);
        rolPrincipal = await localStorage.GetItemAsStringAsync("rolPrincipal");
    }

    private void MostrarFormulario()
    {
        rolUsuario = new RolUsuario();
        mostrarFormulario = true;
    }

    private void EditarRolUsuario(RolUsuario ru)
    {
        rolUsuario = new RolUsuario
        {
            FkEmail = ru.FkEmail,
            FkIdRol = ru.FkIdRol
        };
        mostrarFormulario = true;
    }

   private async Task GuardarRolUsuario()
{
    var url1 = "api/RolUsuario";
    var url2 = $"api/RolUsuario/{Uri.EscapeDataString(rolUsuario.FkEmail)}/{rolUsuario.FkIdRol}";

    if (string.IsNullOrEmpty(rolUsuario.FkEmail) || rolUsuario.FkIdRol == 0)
        return;

    var existe = rolesUsuarios.Any(ru => ru.FkEmail == rolUsuario.FkEmail && ru.FkIdRol == rolUsuario.FkIdRol);

    try
    {
        if (!existe)
        {
            await Repository.PostAsync(url1, rolUsuario);
            mensajeAlerta = "Rol de usuario creado correctamente";
        }
        else
        {
            await Repository.PutAsync(url2, rolUsuario);
            mensajeAlerta = "Rol de usuario actualizado correctamente";
        }

        rolesUsuarios = await Repository.GetAsync<List<RolUsuario>>(url1);
        mostrarFormulario = false;
        mostrarAlerta = true;
    }
    catch (Exception ex)
    {
        mensajeAlerta = "Hubo un error al guardar el rol de usuario.";
        mostrarAlerta = true;
        Console.WriteLine($"Error guardando rol usuario: {ex.Message}");
    }
}

    private async Task EliminarRolUsuario(string email, int idRol)
    {
        var url1 = "api/RolUsuario";
        var url2 = $"api/RolUsuario/{email}/{idRol}";

        await Repository.DeleteAsync(url2);
        rolesUsuarios = await Repository.GetAsync<List<RolUsuario>>(url1);
        mensajeAlerta = "Rol de usuario eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
