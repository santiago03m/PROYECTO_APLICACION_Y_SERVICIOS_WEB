@page "/Articulo"

<h3 class="text-center mt-4">Gestión de Artículo</h3>
<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Artículo
    </button>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (articulos is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando artículos...</p>
    </div>
}
else if (!articulos.Any())
{
    <div class="alert alert-info text-center">No hay artículos disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>ID Sección</th>
                <th>ID Subsección</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (a, index) in articulos.Select((a, i) => (a, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@a.Nombre</td>
                    <td>@a.Descripcion</td>
                    <td>@a.FkIdSeccion</td>
                    <td>@a.FkIdSubseccion</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarArticulo(a)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarArticulo(a.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(articulo.Id) ? "Agregar Artículo" : "Editar Artículo")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="articulo" OnValidSubmit="GuardarArticulo">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="articulo.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="articulo.Nombre" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="articulo.Descripcion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Sección:</label>
                            <InputSelect class="form-select" @bind-Value="articulo.FkIdSeccion" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var s in seccionesDisponibles)
                                {
                                    <option value="@s.Id">@s.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Subsección:</label>
                            <InputSelect class="form-select" @bind-Value="articulo.FkIdSubseccion" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var ss in subseccionesDisponibles)
                                {
                                    <option value="@ss.Id">@ss.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Articulo> articulos = new();
    private List<Seccion> seccionesDisponibles = new();
    private List<SubSeccion> subseccionesDisponibles = new();
    private Articulo articulo = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Articulo";
        articulos = await Repository.GetAsync<List<Articulo>>(url);
        seccionesDisponibles = await Repository.GetAsync<List<Seccion>>("api/Seccion");
        subseccionesDisponibles = await Repository.GetAsync<List<SubSeccion>>("api/Subseccion");
    }

    private void MostrarFormulario()
    {
        articulo = new Articulo();
        mostrarFormulario = true;
    }

    private void EditarArticulo(Articulo a)
    {
        articulo = new Articulo
        {
            Id = a.Id,
            Nombre = a.Nombre,
            Descripcion = a.Descripcion,
            FkIdSeccion = a.FkIdSeccion,
            FkIdSubseccion = a.FkIdSubseccion
        };
        mostrarFormulario = true;
    }

    private async Task GuardarArticulo()
    {
        mostrarFormulario = false;
        var url1 = "api/Articulo";
        var url2 = $"api/Articulo/{articulo.Id}";

        if (string.IsNullOrEmpty(articulo.Id))
            return;

        var existe = articulos.Any(a => a.Id == articulo.Id);

        if (!existe)
        {
            await Repository.PostAsync(url1, articulo);
            mensajeAlerta = "Artículo guardado correctamente";
        }
        else
        {
            await Repository.PutAsync(url2, articulo);
            mensajeAlerta = "Artículo actualizado correctamente";
        }
        articulos = await Repository.GetAsync<List<Articulo>>(url1);
        mostrarAlerta = true;
    }

    private async Task EliminarArticulo(string id)
    {
        var url1 = "api/Articulo";
        var url2 = $"api/Articulo/{id}";

        await Repository.DeleteAsync(url2);
        articulos = await Repository.GetAsync<List<Articulo>>(url1);
        mensajeAlerta = "Artículo eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}