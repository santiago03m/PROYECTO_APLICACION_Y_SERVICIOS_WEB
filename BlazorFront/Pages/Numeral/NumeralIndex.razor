@page "/Numeral"

<h3 class="text-center mt-4">Gestión de Numerales</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Numeral
    </button>
    }
    <div class="input-group ms-3" style="max-width: 300px;">
        <input type="text" class="form-control" placeholder="Buscar por ID" @bind="idBusqueda" />
        <button class="btn btn-outline-primary" type="button" @onclick="BuscarPorId" title="Buscar Numeral">
            <i class="fas fa-search"></i> Buscar
        </button>
    </div>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (numerales is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando numerales...</p>
    </div>
}
else if (!numerales.Any())
{
    <div class="alert alert-info text-center">No hay numerales disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Descripción</th>
                <th>ID Literal</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var n in numerales)
            {
                <tr>
                    <td>@n.Id</td>
                    <td>@n.Descripcion</td>
                    <td>@n.FkIdLiteral</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarNumeral(n)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }
                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarNumeral(n.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(numeral.Id) ? "Agregar Numeral" : "Editar Numeral")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="numeral" OnValidSubmit="GuardarNumeral">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="numeral.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="numeral.Descripcion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Literal:</label>
                            <InputSelect class="form-select" @bind-Value="numeral.FkIdLiteral" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var l in litelaresDisponibles)
                                {
                                    <option value="@l.Id">@l.Descripcion</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">Detalle del Numeral</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalBusqueda"></button>
                </div>
                <div class="modal-body">
                    @if (numeralBuscado != null)
                    {
                        <dl class="row">
                            <dt class="col-sm-4">ID</dt>
                            <dd class="col-sm-8">@numeralBuscado.Id</dd>
                            <dt class="col-sm-4">Descripción</dt>
                            <dd class="col-sm-8">@numeralBuscado.Descripcion</dd>
                            <dt class="col-sm-4">Literal</dt>
                            <dd class="col-sm-8">@litelaresDisponibles.FirstOrDefault(l => l.Id == numeralBuscado.FkIdLiteral)?.Descripcion</dd>
                        </dl>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se encontró un numeral con ese ID.</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Numeral> numerales = new();
    private List<Literal> litelaresDisponibles = new();
    private Numeral numeral = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();
    private string idBusqueda = string.Empty;
    private bool mostrarModalBusqueda = false;
    private Numeral? numeralBuscado;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        numerales = await Repository.GetAsync<List<Numeral>>("api/Numeral");
        litelaresDisponibles = await Repository.GetAsync<List<Literal>>("api/Literal");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        numeral = new Numeral();
        mostrarFormulario = true;
    }

    private void EditarNumeral(Numeral n)
    {
        numeral = new Numeral
        {
            Id = n.Id,
            Descripcion = n.Descripcion,
            FkIdLiteral = n.FkIdLiteral
        };
        mostrarFormulario = true;
    }

    private async Task GuardarNumeral()
    {
        var url = "api/Numeral";
        var urlWithId = $"api/Numeral/{numeral.Id}";

        if (string.IsNullOrEmpty(numeral.Id))
            return;

        var existe = numerales.Any(n => n.Id == numeral.Id);

        if (!existe)
            await Repository.PostAsync(url, numeral);
        else
            await Repository.PutAsync(urlWithId, numeral);

        numerales = await Repository.GetAsync<List<Numeral>>(url);
        mostrarFormulario = false;
        mensajeAlerta = "Numeral guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarNumeral(string id)
    {
        var url = "api/Numeral";
        var urlWithId = $"api/Numeral/{id}";

        await Repository.DeleteAsync(urlWithId);
        numerales = await Repository.GetAsync<List<Numeral>>(url);
        mensajeAlerta = "Numeral eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task BuscarPorId()
    {
        mostrarModalBusqueda = false;
        numeralBuscado = null;
        if (string.IsNullOrWhiteSpace(idBusqueda))
        {
            mensajeAlerta = "Ingrese un ID válido";
            mostrarAlerta = true;
            return;
        }
        numeralBuscado = await Repository.GetByIDAsync<Numeral>("api/Numeral", idBusqueda);
        mostrarModalBusqueda = true;
    }
    private void CerrarModalBusqueda()
    {
        mostrarModalBusqueda = false;
        numeralBuscado = null;
    }
}
