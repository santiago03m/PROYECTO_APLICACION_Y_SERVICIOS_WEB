@page "/Paragrafo"

<h3 class="text-center mt-4">Gestión de Párrafo</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Párrafo
    </button>
    }
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (parrafos is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando párrafos...</p>
    </div>
}
else if (!parrafos.Any())
{
    <div class="alert alert-info text-center">No hay párrafos disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Descripción</th>
                <th>ID Artículo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (p, index) in parrafos.Select((p, i) => (p, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@p.Descripcion</td>
                    <td>@p.FkIdArticulo</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarParagrafo(p)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }
                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarParagrafo(p.Id)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(parrafo.Id) ? "Agregar Párrafo" : "Editar Párrafo")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="parrafo" OnValidSubmit="GuardarParrafo">
                        <div class="mb-3">
                            <label class="form-label">ID:</label>
                            <InputText class="form-control" @bind-Value="parrafo.Id" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción:</label>
                            <InputTextArea class="form-control" @bind-Value="parrafo.Descripcion" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Artículo:</label>
                            <InputSelect class="form-select" @bind-Value="parrafo.FkIdArticulo" required>
                                <option value="">Seleccione un artículo</option>
                                @foreach (var articulo in articulosDisponibles)
                                {
                                    <option value="@articulo.Id">@articulo.Descripcion</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Paragrafo> parrafos = new();
    private List<Articulo> articulosDisponibles = new();
    private Paragrafo parrafo = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/Paragrafo";
        parrafos = await Repository.GetAsync<List<Paragrafo>>(url);
        articulosDisponibles = await Repository.GetAsync<List<Articulo>>("api/Articulo");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        parrafo = new Paragrafo();
        mostrarFormulario = true;
    }

    private void EditarParagrafo(Paragrafo p)
    {
        parrafo = new Paragrafo
        {
            Id = p.Id,
            Descripcion = p.Descripcion,
            FkIdArticulo = p.FkIdArticulo
        };
        mostrarFormulario = true;
    }

    private async Task GuardarParrafo()
    {
        var url1 = "api/Paragrafo";
        var url2 = $"api/Paragrafo/{parrafo.Id}";

        if (string.IsNullOrEmpty(parrafo.Id))
            return;

        var existe = parrafos.Any(p => p.Id == parrafo.Id);

        if (!existe)
            await Repository.PostAsync(url1, parrafo);
        else
            await Repository.PutAsync(url2, parrafo);

        parrafos = await Repository.GetAsync<List<Paragrafo>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Párrafo guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarParagrafo(string id)
    {
        var url1 = "api/Paragrafo";
        var url2 = $"api/Paragrafo/{id}";

        await Repository.DeleteAsync(url2);
        parrafos = await Repository.GetAsync<List<Paragrafo>>(url1);
        mensajeAlerta = "Párrafo eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
