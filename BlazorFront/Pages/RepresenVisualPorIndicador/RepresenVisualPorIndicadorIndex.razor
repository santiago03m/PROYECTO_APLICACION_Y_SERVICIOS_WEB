@page "/RepresenVisualPorIndicador"

<h3 class="text-center mt-4">Gestión de Representaciones Visuales por Indicador</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Relación
    </button>
    }
    <div class="input-group ms-3" style="max-width: 300px;">
        <input type="number" class="form-control" placeholder="Buscar por ID Indicador" @bind="idBusquedaIndicador" min="1" />
        <button class="btn btn-outline-primary" type="button" @onclick="BuscarPorId" title="Buscar Relación">
            <i class="fas fa-search"></i> Buscar
        </button>
    </div>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (registros is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando registros...</p>
    </div>
}
else if (!registros.Any())
{
    <div class="alert alert-info text-center">No hay relaciones disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID Indicador</th>
                <th>ID Representación Visual</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in registros)
            {
                <tr>
                    <td>@r.FkIdIndicador</td>
                    <td>@r.FkIdRepresenVisual</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarRegistro(r)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }
                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarRegistro(r.FkIdIndicador, r.FkIdRepresenVisual)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((registro.FkIdIndicador == 0 && registro.FkIdRepresenVisual == 0) ? "Agregar Relación" : "Editar Relación")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="registro" OnValidSubmit="GuardarRegistro">
                        <div class="mb-3">
                            <label class="form-label">ID Indicador:</label>
                            <InputSelect class="form-select" @bind-Value="registro.FkIdIndicador" required>
                                <option value="">Seleccione un Indicador</option>
                                @foreach (var indicador in indicadores)
                                {
                                    <option value="@indicador.Id">@indicador.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Representación Visual:</label>
                            <InputSelect class="form-select" @bind-Value="registro.FkIdRepresenVisual" required>
                                <option value="">Seleccione una Representación Visual</option>
                                @foreach (var representacion in representacionesVisuales)
                                {
                                    <option value="@representacion.Id">@representacion.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">Relaciones del Indicador</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalBusqueda"></button>
                </div>
                <div class="modal-body">
                    @if (relacionesBuscadas != null && relacionesBuscadas.Any())
                    {
                        <div class="mb-3">
                            <strong>ID Indicador:</strong> @idBusquedaIndicador<br />
                            <strong>Nombre Indicador:</strong> @indicadores.FirstOrDefault(i => i.Id == idBusquedaIndicador)?.Nombre
                        </div>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>ID Representación Visual</th>
                                    <th>Nombre Representación Visual</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rel in relacionesBuscadas)
                                {
                                    <tr>
                                        <td>@rel.FkIdRepresenVisual</td>
                                        <td>@representacionesVisuales.FirstOrDefault(rv => rv.Id == rel.FkIdRepresenVisual)?.Nombre</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se encontraron relaciones para ese indicador.</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<RepresenVisualPorIndicador> registros = new();
    private List<RepresentacionVisual> representacionesVisuales = new();
    private List<Indicador> indicadores = new();
    private RepresenVisualPorIndicador registro = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private List <string> userRoles = new();
    private int idBusquedaIndicador;
    private bool mostrarModalBusqueda = false;
    private List<RepresenVisualPorIndicador> relacionesBuscadas = new();


    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/RepresenVisualPorIndicador";
        registros = await Repository.GetAsync<List<RepresenVisualPorIndicador>>(url);
        representacionesVisuales = await Repository.GetAsync<List<RepresentacionVisual>>("api/RepresentacionVisual");
        indicadores = await Repository.GetAsync<List<Indicador>>("api/Indicador");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        registro = new RepresenVisualPorIndicador();
        mostrarFormulario = true;
    }

    private void EditarRegistro(RepresenVisualPorIndicador r)
    {
        registro = new RepresenVisualPorIndicador
        {
            FkIdIndicador = r.FkIdIndicador,
            FkIdRepresenVisual = r.FkIdRepresenVisual
        };
        mostrarFormulario = true;
    }

    private async Task GuardarRegistro()
    {
        var url1 = "api/RepresenVisualPorIndicador";
        var url2 = $"api/RepresenVisualPorIndicador/{registro.FkIdIndicador}/{registro.FkIdRepresenVisual}";

        if (registro.FkIdIndicador == 0 || registro.FkIdRepresenVisual == 0)
            return;

        var existe = registros.Any(r => r.FkIdIndicador == registro.FkIdIndicador && r.FkIdRepresenVisual == registro.FkIdRepresenVisual);

        if (!existe)
            await Repository.PostAsync(url1, registro);
        else
            await Repository.PutAsync(url2, registro);

        registros = await Repository.GetAsync<List<RepresenVisualPorIndicador>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Relación guardada correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarRegistro(int fkidindicador, int fkidrepresenvisual)
    {
        var url1 = "api/RepresenVisualPorIndicador";
        var url2 = $"api/RepresenVisualPorIndicador/{fkidindicador}/{fkidrepresenvisual}";

        await Repository.DeleteAsync(url2);
        registros = await Repository.GetAsync<List<RepresenVisualPorIndicador>>(url1);
        mensajeAlerta = "Relación eliminada correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task BuscarPorId()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
        if (idBusquedaIndicador <= 0)
        {
            mensajeAlerta = "Ingrese un ID de indicador válido (mayor a 0)";
            mostrarAlerta = true;
            return;
        }
        relacionesBuscadas = registros.Where(r => r.FkIdIndicador == idBusquedaIndicador).ToList();
        mostrarModalBusqueda = true;
    }
    private void CerrarModalBusqueda()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
    }
}
