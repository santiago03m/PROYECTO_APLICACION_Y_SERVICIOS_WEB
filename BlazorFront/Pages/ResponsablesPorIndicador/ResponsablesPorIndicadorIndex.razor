@page "/ResponsablesPorIndicador"

<h3 class="text-center mt-4">Gesti贸n de Responsables por Indicador</h3>
<div class="d-flex justify-content-end mb-3">
    @if (userRoles.Contains("admin"))
    {
    <button class="btn btn-primary" @onclick="MostrarFormulario">
        <i class="fas fa-plus"></i> Agregar Responsable
    </button>
    }
    <div class="input-group ms-3" style="max-width: 300px;">
        <input type="text" class="form-control" placeholder="Buscar por ID Responsable" @bind="idBusquedaResponsable" />
        <button class="btn btn-outline-primary" type="button" @onclick="BuscarPorId" title="Buscar Responsable">
            <i class="fas fa-search"></i> Buscar
        </button>
    </div>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (responsables is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando responsables...</p>
    </div>
}
else if (!responsables.Any())
{
    <div class="alert alert-info text-center">No hay responsables disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID Responsable</th>
                <th>ID Indicador</th>
                <th>Fecha Asignaci贸n</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in responsables)
            {
                <tr>
                    <td>@r.FkIdResponsable</td>
                    <td>@r.FkIdIndicador</td>
                    <td>@r.FechaAsignacion.ToString("yyyy-MM-dd")</td>
                    <td>
                        @if (userRoles.Contains("admin")|| userRoles.Contains("Validador"))
                        {
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarResponsable(r)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        }
                        @if (userRoles.Contains("admin"))
                        {
                        <button class="btn btn-danger btn-sm"
                            @onclick="() => EliminarResponsable(r.FkIdResponsable, r.FkIdIndicador)">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(responsable.FkIdResponsable) ? "Agregar Responsable" :
                                            "Editar Responsable")</h5>
                <button type="button" class="btn-close" @onclick="Cancelar"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="responsable" OnValidSubmit="GuardarResponsable">
                    <div class="mb-3">
                        <label class="form-label">ID Responsable:</label>
                        <InputSelect class="form-select" @bind-Value="responsable.FkIdResponsable" required>
                            <option disabled value="">-- Seleccione --</option>
                            @foreach (var r in responsablesDisponibles)
                                {
                                    <option value="@r.Id">@r.Nombre</option>
                                }
                        </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">ID Indicador:</label>
                            <InputSelect class="form-select" @bind-Value="responsable.FkIdIndicador" required>
                                <option disabled value="">-- Seleccione --</option>
                                @foreach (var i in indicadoresDisponibles)
                                {
                                    <option value="@i.Id">@i.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Asignaci贸n:</label>
                            <InputDate class="form-control" @bind-Value="responsable.FechaAsignacion" required />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarModalBusqueda)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header">
                    <h5 class="modal-title">Relaciones del Responsable</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalBusqueda"></button>
                </div>
                <div class="modal-body">
                    @if (relacionesBuscadas != null && relacionesBuscadas.Any())
                    {
                        <div class="mb-3">
                            <strong>ID Responsable:</strong> @idBusquedaResponsable<br />
                            <strong>Nombre Responsable:</strong> @responsablesDisponibles.FirstOrDefault(a => a.Id == idBusquedaResponsable)?.Nombre
                        </div>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>ID Indicador</th>
                                    <th>Nombre Indicador</th>
                                    <th>Fecha Asignaci贸n</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rel in relacionesBuscadas)
                                {
                                    <tr>
                                        <td>@rel.FkIdIndicador</td>
                                        <td>@indicadoresDisponibles.FirstOrDefault(i => i.Id == rel.FkIdIndicador)?.Nombre</td>
                                        <td>@rel.FechaAsignacion.ToString("yyyy-MM-dd")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se encontraron relaciones para ese responsable.</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ResponsablesPorIndicador> responsables = new();
    private List<Actor> responsablesDisponibles = new();
    private List<Indicador> indicadoresDisponibles = new();
    private ResponsablesPorIndicador responsable = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private bool esNuevo = true;
    private List <string> userRoles = new();
    private string idBusquedaResponsable = string.Empty;
    private bool mostrarModalBusqueda = false;
    private List<ResponsablesPorIndicador> relacionesBuscadas = new();

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/ResponsablesPorIndicador";
        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>(url);
        responsablesDisponibles = await Repository.GetAsync<List<Actor>>("api/Actor");
        indicadoresDisponibles = await Repository.GetAsync<List<Indicador>>("api/Indicador");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Obtener los roles del usuario
            userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();
        }
    }

    private void MostrarFormulario()
    {
        responsable = new ResponsablesPorIndicador
        {
            FechaAsignacion = DateTime.Now
        };
        esNuevo = true;
        mostrarFormulario = true;
    }

    private void EditarResponsable(ResponsablesPorIndicador r)
    {
        responsable = new ResponsablesPorIndicador
        {
            FkIdResponsable = r.FkIdResponsable,
            FkIdIndicador = r.FkIdIndicador,
            FechaAsignacion = r.FechaAsignacion
        };
        esNuevo = false;
        mostrarFormulario = true;
    }

    private async Task GuardarResponsable()
    {
        mostrarFormulario = false;
        var url1 = "api/ResponsablesPorIndicador";

        if (esNuevo)
        {
            // Agregar un nuevo responsable
            var existe = responsables.Any(r =>
            r.FkIdResponsable == responsable.FkIdResponsable &&
            r.FkIdIndicador == responsable.FkIdIndicador);

            if (!existe)
            {
                // Realizar la operaci贸n de agregar
                await Repository.PostAsync(url1, responsable);
                responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>(url1);
                mensajeAlerta = "Responsable guardado correctamente";
            }
            else
            {
                mensajeAlerta = "El responsable ya est谩 asignado al indicador";
            }
        }
        else
        {
            mensajeAlerta = "Esta tabla no admite modificaciones";
        }

        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>(url1);
        mostrarAlerta = true;
    }


    private async Task EliminarResponsable(string fkidresponsable, int fkidindicador)
    {
        var url = $"api/ResponsablesPorIndicador/{fkidresponsable}/{fkidindicador}";

        await Repository.DeleteAsync(url);
        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>("api/ResponsablesPorIndicador");
        mensajeAlerta = "Responsable eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task BuscarPorId()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
        if (string.IsNullOrWhiteSpace(idBusquedaResponsable))
        {
            mensajeAlerta = "Ingrese un ID de responsable v谩lido";
            mostrarAlerta = true;
            return;
        }
        relacionesBuscadas = responsables.Where(r => r.FkIdResponsable == idBusquedaResponsable).ToList();
        mostrarModalBusqueda = true;
    }
    private void CerrarModalBusqueda()
    {
        mostrarModalBusqueda = false;
        relacionesBuscadas.Clear();
    }
}
