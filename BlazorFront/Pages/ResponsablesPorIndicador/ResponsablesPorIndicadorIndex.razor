@using Blazored.LocalStorage

@page "/ResponsablesPorIndicador"

<h3 class="text-center mt-4">Gestión de Responsables por Indicador</h3>
@if (rolPrincipal == "admin")
{
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i> Agregar Responsable
        </button>
    </div>
}

@if (mostrarAlerta)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @mensajeAlerta
        <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
    </div>
}

@if (responsables is null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Cargando responsables...</p>
    </div>
}
else if (!responsables.Any())
{
    <div class="alert alert-info text-center">No hay responsables disponibles.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>ID Responsable</th>
                <th>ID Indicador</th>
                <th>Fecha Asignación</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (r, index) in responsables.Select((r, i) => (r, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@r.FkIdResponsable</td>
                    <td>@r.FkIdIndicador</td>
                    <td>@r.FechaAsignacion.ToString("yyyy-MM-dd")</td>
                    <td>
                        @if (rolPrincipal == "admin" || rolPrincipal == "Validador")
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarResponsable(a)">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        }
                        @if (rolPrincipal == "admin")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarResponsable(a.Id)">
                                <i class="fas fa-trash"></i> Eliminar
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(responsable.FkIdResponsable) ? "Agregar Responsable" :
                                            "Editar Responsable")</h5>
                <button type="button" class="btn-close" @onclick="Cancelar"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="responsable" OnValidSubmit="GuardarResponsable">
                    <div class="mb-3">
                        <label class="form-label">ID Responsable:</label>
                        <InputText class="form-control" @bind-Value="responsable.FkIdResponsable" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">ID Indicador:</label>
                        <InputNumber class="form-control" @bind-Value="responsable.FkIdIndicador" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Fecha Asignación:</label>
                        <InputDate class="form-control" @bind-Value="responsable.FechaAsignacion" required />
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-success me-2">
                            <i class="fas fa-save"></i> Guardar
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}

@inject ILocalStorageService localStorage

@code {
    private List<ResponsablesPorIndicador> responsables = new();
    private ResponsablesPorIndicador responsable = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string rolPrincipal = string.Empty;


    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var url = "api/ResponsablesPorIndicador";
        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>(url);
        rolPrincipal = await localStorage.GetItemAsStringAsync("rolPrincipal");
    }

    private void MostrarFormulario()
    {
        responsable = new ResponsablesPorIndicador
        {
            FechaAsignacion = DateTime.Now
        };
        mostrarFormulario = true;
    }

    private void EditarResponsable(ResponsablesPorIndicador r)
    {
        responsable = new ResponsablesPorIndicador
        {
            FkIdResponsable = r.FkIdResponsable,
            FkIdIndicador = r.FkIdIndicador,
            FechaAsignacion = r.FechaAsignacion
        };
        mostrarFormulario = true;
    }

    private async Task GuardarResponsable()
    {
        var url1 = "api/ResponsablesPorIndicador";
        var url2 = $"api/ResponsablesPorIndicador/{responsable.FkIdResponsable}/{responsable.FkIdIndicador}";

        if (string.IsNullOrEmpty(responsable.FkIdResponsable))
            return;

        var existe = responsables.Any(r =>
        r.FkIdResponsable == responsable.FkIdResponsable &&
        r.FkIdIndicador == responsable.FkIdIndicador);

        if (!existe)
            await Repository.PostAsync(url1, responsable);
        else
            await Repository.PutAsync(url2, responsable);

        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>(url1);
        mostrarFormulario = false;
        mensajeAlerta = "Responsable guardado correctamente";
        mostrarAlerta = true;
    }

    private async Task EliminarResponsable(string fkidresponsable, int fkidindicador)
    {
        var url = $"api/ResponsablesPorIndicador/{fkidresponsable}/{fkidindicador}";

        await Repository.DeleteAsync(url);
        responsables = await Repository.GetAsync<List<ResponsablesPorIndicador>>("api/ResponsablesPorIndicador");
        mensajeAlerta = "Responsable eliminado correctamente";
        mostrarAlerta = true;
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}
